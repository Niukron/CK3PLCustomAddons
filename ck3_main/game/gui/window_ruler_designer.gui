window = {
	name = "ruler_designer"
	size = { 100% 100% }
	movable = no
	layer = windows_layer
	filter_mouse = all
	datacontext = "[GetVariableSystem]"

	background = {
		texture = "gfx/interface/component_tiles/tile_window_background_no_edge.dds"
		spriteType = Corneredtiled
		spriteborder = { 18 0 }
		margin = { 20 0 }
        texture_density = 2

		modify_texture = {
			texture = "gfx/interface/component_overlay/overlay_effect.dds"
			blend_mode = overlay
		}
	}

	background = {
		texture = "gfx/interface/component_tiles/tile_window_background_no_edge.dds"
		spriteType = Corneredtiled
		spriteborder = { 18 0 }
		margin = { 20 0 }
        texture_density = 2

		modify_texture = {
			texture = "gfx/interface/component_overlay/overlay_effect.dds"
			blend_mode = overlay
		}
	}

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		on_start = "[GetVariableSystem.Clear( 'faith_select_window_open' )]"
		on_start = "[GetVariableSystem.Clear( 'culture_select_window_open' )]"
		on_start = "[GetVariableSystem.Clear( 'trait_select_window_open' )]"
		on_start = "[GetVariableSystem.Clear( 'trait_select_window_replace' )]"
		on_start = "[GetVariableSystem.Clear( 'appearance_customization_window_open' )]"
		on_start = "[GetVariableSystem.Clear( 'appearance_customization_side_tab_open' )]"
		on_start = "[GetVariableSystem.Clear( 'appearance_customization_portrait_view' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
	}

	vbox = {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		margin_top = 5

		background = {
			texture = "gfx/interface/illustrations/event_scenes_frontend/temple.dds"
			alpha = 0.5
			mirror = horizontal
			fittype = centercrop

			modify_texture = {
				texture = "gfx/interface/window_ruler_designer/rd_bg_mask.dds"
				blend_mode = alphamultiply
				spritetype = corneredstretched
				spriteborder = { 590 0 }
			}
		}

		background = {
			texture = "gfx/interface/component_masks/mask_fade_corner.dds"
			color = { 0.12 0.12 0.12 1 }
			mirror = horizontal
			margin_right = -1200
			alpha = 0.6
		}

		header_standard = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "RULER_DESIGNER"
			}

			blockoverride "button_close"
			{
				# onclick = "[RulerDesignerWindow.Close]"
				visible = no
			}
		}

		hbox = {
			name = "main_designer"
			visible = "[Not( VariableSystem.Exists( 'appearance_customization_window_open' ) )]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 20 20 }

			using =  Animation_Tab_Switch

			widget = {
				visible = "[Not( VariableSystem.Exists( 'trait_select_window_open' ) )]"
				layoutpolicy_vertical = expanding
				size = { 520 0 }

				vbox = {
					name = "left_panel"
					margin = { 15 15 }
					margin_bottom = 5

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 20

						hbox = {
							name = "sex_customization"
							layoutpolicy_horizontal = expanding
							spacing = 40

							vbox = {
								name = "sex"

								vbox_header_with_line = {
									layoutpolicy_horizontal = expanding

									blockoverride "autoresize"
									{
										autoresize = yes
									}

									blockoverride "header_label"
									{
										text = "RULER_DESIGNER_SEX"
										max_width = 120
										autoresize = yes
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									margin_top = 3
									spacing = 5

									button_male = {
										name = "male"
										down = "[Not( RulerDesignerWindow.IsFemale )]"
										alwaystransparent = "[Not( RulerDesignerWindow.IsFemale )]"
										onclick = "[RulerDesignerWindow.SetIsFemale( '(bool)no' )]"
										tooltip = RULER_DESIGNER_SET_IS_MALE
										using = tooltip_se

										onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
									}

									button_female = {
										name = "female"
										down = "[RulerDesignerWindow.IsFemale]"
										alwaystransparent = "[RulerDesignerWindow.IsFemale]"
										onclick = "[RulerDesignerWindow.SetIsFemale( '(bool)yes' )]"
										tooltip = RULER_DESIGNER_SET_IS_FEMALE
										using = tooltip_se

										onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
									}

									expand = {}
								}
							}

							vbox = {
								name = "sexuality"

								vbox_header_with_line = {
									layoutpolicy_horizontal = expanding

									blockoverride "autoresize"
									{
										autoresize = yes
									}

									blockoverride "header_label"
									{
										text = "RULER_DESIGNER_SEXUALITY"
										max_width = 250
									}
								}

								hbox = {
									margin_top = 3
									spacing = 5

									button_randomize = {
										name = "random"
										down = "[RulerDesignerWindow.HasSexuality( 'none' )]"
										alwaystransparent = "[RulerDesignerWindow.HasSexuality( 'none' )]"
										onclick = "[RulerDesignerWindow.SetSexuality( 'none' )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_RANDOM
										using = tooltip_se
									}

									button_heterosexual = {
										name = "heterosexual"
										down = "[RulerDesignerWindow.HasSexuality( 'heterosexual' )]"
										alwaystransparent = "[RulerDesignerWindow.HasSexuality( 'heterosexual' )]"
										onclick = "[RulerDesignerWindow.SetSexuality( 'heterosexual' )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_HETEROSEXUAL
										using = tooltip_se
									}

									button_homosexual_female = {
										name = "homosexual_female"
										visible = "[RulerDesignerWindow.IsFemale]"
										down = "[RulerDesignerWindow.HasSexuality( 'homosexual' )]"
										alwaystransparent = "[RulerDesignerWindow.HasSexuality( 'homosexual' )]"
										onclick = "[RulerDesignerWindow.SetSexuality( 'homosexual' )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_HOMOSEXUAL
										using = tooltip_se
									}

									button_homosexual_male = {
										name = "homosexual_male"
										visible = "[Not( RulerDesignerWindow.IsFemale )]"
										down = "[RulerDesignerWindow.HasSexuality( 'homosexual' )]"
										alwaystransparent = "[RulerDesignerWindow.HasSexuality( 'homosexual' )]"
										onclick = "[RulerDesignerWindow.SetSexuality( 'homosexual' )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_HOMOSEXUAL
										using = tooltip_se
									}

									button_bisexual_female = {
										name = "bisexual_female"
										visible = "[RulerDesignerWindow.IsFemale]"
										down = "[RulerDesignerWindow.HasSexuality( 'bisexual' )]"
										alwaystransparent = "[RulerDesignerWindow.HasSexuality( 'bisexual' )]"
										onclick = "[RulerDesignerWindow.SetSexuality( 'bisexual' )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_BISEXUAL
										using = tooltip_se
									}

									button_bisexual_male = {
										name = "bisexual_male"
										visible = "[Not( RulerDesignerWindow.IsFemale )]"
										down = "[RulerDesignerWindow.HasSexuality( 'bisexual' )]"
										alwaystransparent = "[RulerDesignerWindow.HasSexuality( 'bisexual' )]"
										onclick = "[RulerDesignerWindow.SetSexuality( 'bisexual' )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_BISEXUAL
										using = tooltip_se
									}

									button_asexual = {
										name = "asexual"
										down = "[RulerDesignerWindow.HasSexuality( 'asexual' )]"
										alwaystransparent = "[RulerDesignerWindow.HasSexuality( 'asexual' )]"
										onclick = "[RulerDesignerWindow.SetSexuality( 'asexual' )]"
										tooltip = RULER_DESIGNER_SET_SEXUALITY_ASEXUAL
										using = tooltip_se
									}
								}
							}

							expand = {}
						}

						vbox = {
							name = "culture_and_faith"
							layoutpolicy_horizontal = expanding
							spacing = 50

							vbox_labelled_entry = {
								layoutpolicy_horizontal = expanding
								datacontext = "[RulerDesignerWindow.GetFaith]"

								blockoverride "header_label"
								{
									text = "RULER_DESIGNER_FAITH_LABEL"
								}

								blockoverride "item_icon_entry"
								{
									icon = {
										size = { 50 50 }
										tooltipwidget = { faith_tooltip_core_tenents = {} }
										texture = "[Faith.GetIcon]"
										using = tooltip_se
									}
								}

								blockoverride "item_name_label"
								{
									text = "[Faith.GetNameNoTooltip]"
								}

								blockoverride "item_info_text"
								{
									text = "[Faith.GetReligion.GetNameNoTooltip]"
								}

								blockoverride "reset_button"
								{
									onclick = "[VariableSystem.Toggle( 'faith_select_window_open' )]"
									onclick = "[VariableSystem.Clear( 'culture_select_window_open' )]"
									tooltip = RULER_DESIGNER_CHOOSE_FAITH
									using = tooltip_se
								}
							}

							vbox_labelled_entry = {
								layoutpolicy_horizontal = expanding
								datacontext = "[RulerDesignerWindow.GetCulture]"

								blockoverride "header_label"
								{
									text = "RULER_DESIGNER_CULTURE_LABEL"
								}
								blockoverride "item_icon_texture"
								{
									visible = no
								}
								blockoverride "item_name_label"
								{
									text = "[Culture.GetNameNoTooltip]"
									default_format = "#bold"
								}
								blockoverride "item_info_text"
								{
									text = "[Culture.GetGroup.GetName]"
								}
								blockoverride "reset_button"
								{
									onclick = "[VariableSystem.Toggle( 'culture_select_window_open' )]"
									using = Button_Close_Select_Faith
									tooltip = RULER_DESIGNER_CHOOSE_CULTURE
									using = tooltip_se
								}
							}
						}

						vbox = {
							name = "name"
							layoutpolicy_horizontal = expanding

							vbox_header_with_line = {
								layoutpolicy_horizontal = expanding

								blockoverride "header_label"
								{
									text = "RULER_DESIGNER_CHARACTER_NAME"
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								margin_top = 10
								spacing = 10

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5

									text_single = {
										text = "RULER_DESIGNER_FIRST_NAME_LABEL"
										align = nobaseline
									}

									editbox_standard = {
										layoutpolicy_horizontal = expanding
										
										blockoverride "editbox_properties"
										{
											name = "first_name_editbox" # name used in code
											ontextedited = "[RulerDesignerWindow.OnEditFirstName]"
											maxcharacters = 40
										}
									}

									expand = {}
								}

								hbox = {
									name = "random_name"
									layoutpolicy_horizontal = expanding
									spacing = 5
									margin = { 5 0 }

									expand = {}

									button_randomize = {
										name = "dice_icon"
										size = { 30 30 }
										enabled = no
									}

									text_single = {
										text = "RULER_DESIGNER_RANDOM_NAME_LABEL"
										align = nobaseline
										max_width = 150
									}

									hbox = {
										spacing = 5

										button_standard = {
											name = "random_faith_name"
											datacontext = "[RulerDesignerWindow.GetFaith]"
											visible = "[Faith.HasReservedNames( RulerDesignerWindow.IsFemale )]"
											size = { 140 25 }
											text = "[Faith.GetAdjectiveNoTooltip]"
											tooltip = RULER_DESIGNER_RANDOM_NAME_FAITH_TOOLTIP
											using = tooltip_se
											onclick = "[RulerDesignerWindow.RandomizeFirstNameFaith]"
										}

										button_standard = {
											name = "random_culture_name"
											datacontext = "[RulerDesignerWindow.GetCulture]"
											size = { 140 25 }
											text = "[Culture.GetNameNoTooltip]"
											tooltip = RULER_DESIGNER_RANDOM_NAME_CULTURE_TOOLTIP
											using = tooltip_se
											onclick = "[RulerDesignerWindow.RandomizeFirstNameCulture]"
										}
									}
								}
							}
						}

						vbox_labelled_entry = {
							name = "dynasty_house"
							layoutpolicy_horizontal = expanding

							blockoverride "header_label"
							{
								text = "RULER_DESIGNER_DYNASTY_LABEL"
								max_width = 470
							}
							blockoverride "item_icon_entry" {}

							blockoverride "item_data"
							{
								vbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 5
										margin_top = 10

										text_single = {
											text = "RULER_DESIGNER_DYNASTY_NAME"
											align = nobaseline
										}

										editbox_standard = {
											layoutpolicy_horizontal = expanding
											
											blockoverride "editbox_properties"
											{
												name = "dynasty_name_editbox" # name used in code
												ontextedited = "[RulerDesignerWindow.OnEditDynastyName]"
												maxcharacters = 40
											}
										}

										button_randomize = {
											onclick = "[RulerDesignerWindow.RandomizeDynastyName]"
											tooltip = RULER_DESIGNER_RANDOMIZE_DYNASTY_NAME
											using = tooltip_se
										}
									}

									hbox = {
										spacing = 5

										widget = {
											size = { 30 30 }
										}

										coa_dynasty_ruler_designer = {
											datacontext = "[RulerDesignerWindow.GetDynastyCoatOfArms]"
											blockoverride "frame_override"
											{
												frame = 2
											}
											blockoverride "coa_button" {
												alwaystransparent = yes
											}
										}

										button_randomize = {
											onclick = "[RulerDesignerWindow.RandomizeDynastyCoatOfArms]"
											tooltip = RULER_DESIGNER_RANDOMIZE_DYNASTY_COA
											using = tooltip_se
										}
									}
								}
							}

							blockoverride "reset_button"
							{
								visible = no
							}
						}

						vbox = {
							name = "realm"
							layoutpolicy_horizontal = expanding
							datacontext = "[RulerDesignerWindow.GetCharacterToOverwrite]"
							datacontext = "[Character.GetPrimaryTitle]"
							datacontext = "[RulerDesignerWindow.GetTitleCoatOfArms]"

							vbox_header_with_line = {
								layoutpolicy_horizontal = expanding

								blockoverride "header_label"
								{
									text = "RULER_DESIGNER_REALM_LABEL"
									max_width = 470
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								margin_top = 5
								spacing = 10

								text_multi = {
									text = "[Title.Custom('TitleAdjNoTooltip')|U]"
									default_format = "#high"
									using = Font_Size_Big
									max_width = 470
									autoresize = yes
								}

								hbox = {
									spacing = 5

									widget = {
										size = { 30 30 }
									}

									widget = {
										size = { 30 30 }
									}

									coa_realm_big = {
										name = "default_coa"
										visible = "[Not( RulerDesignerCoA.IsSet )]"
										blockoverride "coa_button" {}
									}

									coa_realm_big = {
										name = "custom_coa"
										visible = "[RulerDesignerCoA.IsSet]"
										blockoverride "coat_of_arms"
										{
											coat_of_arms = "[RulerDesignerCoA.GetCoA.GetTexture('(int32)124','(int32)124')]"
											coat_of_arms_slot = "[RulerDesignerCoA.GetCoA.GetSlot('(int32)124','(int32)124')]"
										}
										blockoverride "coa_button" {
											alwaystransparent = yes
										}
									}

									button_randomize = {
										onclick = "[RulerDesignerWindow.RandomizeTitleCoatOfArms]"
										tooltip = RULER_DESIGNER_RANDOMIZE_TITLE_COA
										using = tooltip_se
									}

									button_revert = {
										onclick = "[RulerDesignerWindow.ResetTitleCoatOfArms]"
										tooltip = RULER_DESIGNER_RESET_TITLE_COA
										using = tooltip_se
									}
								}
							}
						}
					}

					expand = {}

					hbox = {
						layoutpolicy_horizontal = expanding

						button_standard_back = {
							onclick = "[RulerDesignerWindow.Close]"
							shortcut = "close_window"

							blockoverride "text"
							{
								text = "BACK_LABEL"
							}
						}

						expand = {}
					}
				}
			}

			divider_light = {
				visible = "[Not( VariableSystem.Exists( 'trait_select_window_open' ) )]"
				layoutpolicy_vertical = expanding
			}

			vbox = {
				name = "faith_selection"
				layoutpolicy_vertical = expanding
				visible = "[VariableSystem.Exists( 'faith_select_window_open' )]"

				state = {
					name = _show
					using = Animation_FadeIn_Quick
				}

				state = {
					name = _hide
					alpha = 0
					on_start = "[RulerDesignerWindow.AccessReligionList.HideAllChildren]"
				}

				text_label_center = {
					text = RULER_DESIGNER_FAITH_LIST_LABEL
				}

				scrollbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					minimumsize = { 350 0 }

					datacontext = "[RulerDesignerWindow.AccessReligionList]"

					blockoverride "scrollbox_content"
					{
						vbox = {
							datamodel = "[CollapsibleReligionList.AccessItems]"
							layoutpolicy_horizontal = expanding

							item = {
								vbox = {
									name = "religion"
									datacontext = "[CollapsibleReligionListGroup.GetItem]"
									layoutpolicy_horizontal = expanding

									hbox = {
										layoutpolicy_horizontal = expanding
										tooltip = "RULER_DESIGNER_LIST_FAITH_ENTRY_TOOLTIP"

										button_standard_hover = {
											layoutpolicy_horizontal = expanding
											onclick = "[CollapsibleReligionListGroup.ToggleChildrenVisible]"

											hbox = {
												margin = { 5 0 }
												spacing = 10

												button_list_expand = {
													checked = "[CollapsibleReligionListGroup.AreChildrenVisible]"
													onclick = "[CollapsibleReligionListGroup.ToggleChildrenVisible]"
												}

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[Religion.GetNameNoTooltip]"
													size = { 0 40 }
													align = nobaseline
													default_format = "#clickable"
													autoresize = no
												}
											}
										}
									}

									vbox = {
										name = "faiths"
										datamodel = "[Religion.GetFaiths]"
										visible = "[CollapsibleReligionListGroup.AreChildrenVisible]"
										layoutpolicy_horizontal = expanding

										item = {
											hbox = {
												layoutpolicy_horizontal = expanding

												button_standard_hover = {
													name = "faith_item"
													layoutpolicy_horizontal = expanding
													size = { 0 55 }
													using = Button_Select_Faith
													tooltipwidget = { faith_tooltip_ruler_designer = {} }
													enabled = "[Not( ObjectsEqual( Faith.Self, RulerDesignerWindow.GetFaith ) )]"

													hbox = {
														margin = { 5 0 }
														margin_left = 30
														spacing = 10

														button_religion_icon_ruler_designer = {
															name = "faith_icon"
															size = { 50 50 }
															using = Button_Select_Faith
														}

														text_single = {
															layoutpolicy_horizontal = expanding
															text = "[Faith.GetNameNoTooltip]"
															default_format = "#clickable"
															autoresize = no
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 10 }
					margin_bottom = 15

					button_standard = {
						onclick = "[VariableSystem.Clear( 'faith_select_window_open' )]"
						text = "CANCEL"
						shortcut = "close_window"
					}
				}
			}

			vbox = {
				name = "culture_selection"
				layoutpolicy_vertical = expanding
				visible = "[VariableSystem.Exists( 'culture_select_window_open' )]"

				state = {
					name = _show
					using = Animation_FadeIn_Quick
				}

				state = {
					name = _hide
					alpha = 0
					on_start = "[RulerDesignerWindow.AccessCultureList.HideAllChildren]"
				}

				text_label_center = {
					text = RULER_DESIGNER_CULTURE_LIST_LABEL
					using = Font_Size_Big
				}

				scrollbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					minimumsize = { 400 100% }

					datacontext = "[RulerDesignerWindow.AccessCultureList]"

					blockoverride "scrollbox_content"
					{
						vbox = {
							datamodel = "[CollapsibleCultureList.AccessItems]"
							layoutpolicy_horizontal = expanding

							item = {
								vbox = {
									name = "culture_group"
									layoutpolicy_horizontal = expanding

									datacontext = "[CollapsibleCultureListGroup.GetItem]"

									button_standard_hover = {
										layoutpolicy_horizontal = expanding

										size = { 0 40 }
										onclick = "[CollapsibleCultureListGroup.ToggleChildrenVisible]"
										tooltip = RULER_DESIGNER_LIST_CULTURE_ENTRY_TOOLTIP

										hbox = {
											layoutpolicy_horizontal = expanding
											margin = { 5 0 }
											spacing = 10

											button_list_expand = {
												checked = "[CollapsibleCultureListGroup.AreChildrenVisible]"
												onclick = "[CollapsibleCultureListGroup.ToggleChildrenVisible]"
											}

											text_single = {
												layoutpolicy_horizontal = expanding
												text = "[CultureGroup.GetName]"
												default_format = "#clickable"
												autoresize = no
											}
										}
									}


									vbox = {
										name = "cultures"
										layoutpolicy_horizontal = expanding
										datamodel = "[CultureGroup.GetCultures]"
										visible = "[CollapsibleCultureListGroup.AreChildrenVisible]"

										item = {
											hbox = {
												layoutpolicy_horizontal = expanding

												button_standard_hover = {
													name = "culture_item"
													layoutpolicy_horizontal = expanding
													size = { 0 35 }
													tooltip = RULER_DESIGNER_LIST_CULTURE_ENTRY_SELECT_TOOLTIP
													using = Button_Select_Culture
													enabled = "[Not( ObjectsEqual( CultureTemplate.Self, RulerDesignerWindow.GetCulture.GetTemplate ) )]"

													hbox = {
														margin_left = 50

														text_single = {
															margin = { 5 0 }
															text = "[CultureTemplate.GetName]"
															default_format = "#clickable"
															align = nobaseline
														}

														expand = {}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 10 }
					margin_bottom = 15

					button_standard = {
						text = "CANCEL"
						using = Button_Close_Select_Culture
						shortcut = "close_window"
					}
				}
			}

			widget = {
				name = "middle_portrait"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				# error_horse = {}

				icon = {
					parentanchor = bottom|hcenter
					position = { 0 20 }
					size = { 650 1000 }
					scale = "[ScaleToFitElementInside('(int32)650', '(int32)1100')]"
					texture = "[RulerDesignerWindow.GetPortrait( 'environment_body', 'camera_ruler_designer', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"

					state = {
						name = "ruler_designer_portrait_refresh"
						using = Animation_Refresh_FadeOut
					}

					state = {
						using = Animation_Refresh_FadeIn
					}
				}

				button_standard = {
					parentanchor = bottom|hcenter
					size = { 250 45 }
					position = { 0 -5 }
					text = "RULER_DESIGNER_CHANGE_PORTRAIT"
					onclick = "[VariableSystem.Set( 'appearance_customization_window_open', 'ethnicity_selection' )]"
					onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'full_body' )]"
				}

				text_label_center = {
					parentanchor = bottom|hcenter
					position = { 0 -80 }
					text = "RULER_DESIGNER_FULL_NAME"
					using = Font_Size_Big
					autoresize = yes
					max_width = 550
					multiline = yes
					visible = "[Not( StringIsEmpty( RulerDesignerWindow.GetFirstName ) )]"
					using = Animation_ShowHide_Standard
				}
			}

			vbox = {
				name = "trait_selection_panel"
				layoutpolicy_vertical = expanding
				visible = "[VariableSystem.Exists( 'trait_select_window_open' )]"

				using =  Animation_Tab_Switch

				text_label_center = {
					text = RULER_DESIGNER_TRAITS_LABEL
					layoutpolicy_horizontal = expanding
				}

				scrollbox = {
					name = "education_trait_selection_list"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					minimumsize = { 400 100% }

					visible = "[VariableSystem.HasValue( 'trait_select_window_open', 'education' )]"

					blockoverride "scrollbox_content"
					{
						vbox_trait_selection_content = {
							layoutpolicy_horizontal = expanding
							datamodel = "[GetEducationTraits]"
						}
					}
				}

				scrollbox = {
					name = "personality_trait_selection_list"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					minimumsize = { 400 100% }

					visible = "[VariableSystem.HasValue( 'trait_select_window_open', 'personality' )]"

					blockoverride "scrollbox_content"
					{
						vbox_trait_selection_content = {
							layoutpolicy_horizontal = expanding
							datamodel = "[GetPersonalityTraits]"
						}
					}
				}

				scrollbox = {
					name = "other_trait_selection_list"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					minimumsize = { 400 100% }

					visible = "[VariableSystem.HasValue( 'trait_select_window_open', 'other' )]"

					blockoverride "scrollbox_content"
					{
						vbox_trait_selection_content = {
							layoutpolicy_horizontal = expanding
							datamodel = "[GetOtherRulerDesignerTraits]"
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 10 }
					margin_bottom = 15

					button_standard = {
						text = "DONE"
						onclick = "[RulerDesignerWindow.CancelTraitEditing]"
						onclick = "[RulerDesignerWindow.CancelTraitEditing]"
						onclick = "[VariableSystem.Clear( 'trait_select_window_open' )]"
						shortcut = "close_window"
					}
				}
			}

			divider_light = {
				visible = "[Not( Or( VariableSystem.Exists( 'culture_select_window_open' ), VariableSystem.Exists( 'faith_select_window_open' ) ) )]"
				layoutpolicy_vertical = expanding
			}

			widget = {
				visible = "[Not( Or( VariableSystem.Exists( 'culture_select_window_open' ), VariableSystem.Exists( 'faith_select_window_open' ) ) )]"
				layoutpolicy_vertical = expanding
				size = { 520 0 }

				vbox = {
					name = "right_panel"
					margin = { 15 15 }
					margin_bottom = 5
					spacing = 10

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						vbox = {
							name = "points"
							layoutpolicy_horizontal = expanding
							spacing = 5

							vbox_header_with_line = {
								layoutpolicy_horizontal = expanding

								blockoverride "header_label"
								{
									text = "RULER_DESIGNER_POINTS_LABEL"
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[RulerDesignerWindow.GetPointsUsedBreakdown]"

								tooltip_enabled = "[ValueBreakdown.HasTooltip]"
								tooltipwidget = {
									widget_value_breakdown_tooltip = {}
								}

								text_single = {
									name = "current"
									text = "[ValueBreakdown.GetValue]"
									using = Font_Size_Big
									align = nobaseline
									default_format = "#high"
									min_width = 50
								}

								progressbar_standard = {
									name = "points_bar"
									layoutpolicy_horizontal = expanding
									using = ProgressBar_Achievements
									visible = "[LessThanOrEqualTo_int32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) )]"
								}

								progressbar_red = {
									name = "points_bar_over_limit"
									layoutpolicy_horizontal = expanding
									using = ProgressBar_Achievements
									visible = "[GreaterThan_int32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) )]"
								}
							}

							text_single = {
								text = RULER_DESIGNER_POINTS_LIMIT_LABEL
								layoutpolicy_horizontal = expanding
								align = right
								margin_right = 15
							}
						}

						vbox = {
							name = "physical"
							layoutpolicy_horizontal = expanding
							spacing = 10

							vbox = {
								name = "age"
								layoutpolicy_horizontal = expanding

								vbox_header_with_line = {
									layoutpolicy_horizontal = expanding

									blockoverride "header_label"
									{
										text = "RULER_DESIGNER_AGE_LABEL"
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 15

									vbox = {
										layoutpolicy_horizontal = expanding
										spacing = 10

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 10
											margin_top = 10

											text_single = {
												text = RULER_DESIGNER_AGE
												using = Font_Size_Big
												align = nobaseline
											}

											expand = {}

											text_single = {
												text = RULER_DESIGNER_BIRTH_YEAR
											}

										}

										scrollbar_age = {
											name = "scrollbar_age"
											layoutpolicy_horizontal = expanding
										}
									}

									expand = {}
								}
							}

							expand = {}
							
							vbox = {
								name = "weight"
								layoutpolicy_horizontal = expanding
								spacing = 5

								vbox_header_with_line = {
									layoutpolicy_horizontal = expanding

									blockoverride "header_label"
									{
										text = "RULER_DESIGNER_WEIGHT_LABEL"
									}
								}

								scrollbar_weight = {
									name = "scrollbar_weight"
									layoutpolicy_horizontal = expanding
								}
							}
								
							expand = {}
						}

						vbox = {
							name = "traits"
							layoutpolicy_horizontal = expanding
							datacontext = "[GetNullCharacter]"

							vbox_header_with_line = {
								layoutpolicy_horizontal = expanding

								blockoverride "header_label"
								{
									text = "RULER_DESIGNER_TRAITS_LABEL"
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								margin = { 10 0 }
								margin_top = 5
								spacing = 3

								hbox_trait_slot = {
									name = "education_trait"
									datacontext = "[RulerDesignerWindow.AccessEducationTraitSlot]"
									layoutpolicy_horizontal = expanding

									blockoverride "plus_button"
									{
										button_trait = {
											visible = "[RulerDesignerWindow.IsAdult]"
											datacontext = "[TraitSlot.GetTrait]"
											onclick = "[TraitSlot.StartEditing]"
											onclick = "[VariableSystem.Toggle( 'trait_select_window_replace' )]"
											onclick = "[VariableSystem.Set( 'trait_select_window_open', 'education' )]"

											state = {
												name = "_mouse_enter"
												on_start = "[PdxGuiWidget.FindChild('swap_icon').TriggerAnimation('show')]"
											}

											state = {
												name = "_mouse_leave"
												on_start = "[PdxGuiWidget.FindChild('swap_icon').TriggerAnimation('hide')]"
											}

											button_replace = {
												name = "swap_icon"
												parentanchor = center
												alwaystransparent = yes
												alpha = 0

												state = {
													name = "show"
													using = Animation_FadeIn_Quick
													duration = 0.05
												}

												state = {
													name = "hide"
													alpha = 0
													using = Animation_FadeOut_Quick
												}

												background = {
													texture = "gfx/interface/component_masks/mask_fade_circle.dds"
													color = { 0.18 0.18 0.18 0.8 }
													margin = {20 20}
												}
											}
										}

										icon = {
											visible = "[Not(RulerDesignerWindow.IsAdult)]"
											texture = "gfx/interface/icons/symbols/icon_cross.dds"
											enabled = no
											size = { 50 50 }
											tooltip = RULER_DESIGNER_NO_EDUCATION_TOOLTIP
										}
									}

									blockoverride "trait_list" {}

									blockoverride "trait_slots_header_text"
									{
										text = RULER_DESIGNER_EDUCATION_TRAIT_LABEL
									}
									blockoverride "button_trait_onclick"
									{
										onclick = "[VariableSystem.Set( 'trait_select_window_open', 'education' )]"
									}
								}

								hbox_trait_slot = {
									name = "personality_traits"
									datacontext = "[RulerDesignerWindow.AccessPersonalityTraitSlots]"
									layoutpolicy_horizontal = expanding

									blockoverride "trait_slots_header_text"
									{
										text = RULER_DESIGNER_PERSONALITY_TRAIT_LABEL
									}
									blockoverride "plus_onclick"
									{
										onclick = "[VariableSystem.Set( 'trait_select_window_open', 'personality' )]"
									}
								}

								hbox_trait_slot = {
									name = "other_traits"
									datacontext = "[RulerDesignerWindow.AccessOtherTraitSlots]"
									layoutpolicy_horizontal = expanding

									blockoverride "trait_slots_header_text"
									{
										text = RULER_DESIGNER_OTHER_TRAIT_LABEL
									}
									blockoverride "plus_onclick"
									{
										onclick = "[VariableSystem.Set( 'trait_select_window_open', 'other' )]"
									}
								}
							}
						}

						vbox = {
							name = "skills"
							layoutpolicy_horizontal = expanding
							spacing = 5

							vbox_header_with_line = {
								layoutpolicy_horizontal = expanding

								blockoverride "header_label"
								{
									text = "RULER_DESIGNER_SKILLS_LABEL"
								}
							}

							fixedgridbox = {
								name = "skill_buttons"
								datamodel = "[RulerDesignerWindow.AccessSkills]"
								datamodel_wrap = 3
								addrow = 60
								addcolumn = 245

								item = {
									widget = {
										name = "skill_item"
										size = { 240 60 }

										background = {
											using = Background_Area
										}

										hbox = {
											margin = { 7 0 }
											spacing = 5

											icon = {
												name = "skill_icon"
												texture = "gfx/interface/icons/icon_skills.dds"
												size = { 32 32 }
												framesize = { 60 60 }
												frame = "[RulerDesignerSkill.GetFrame]"
											}

											vbox = {
												layoutpolicy_horizontal = expanding

												text_single = {
													name = "skill_name"
													layoutpolicy_horizontal = expanding
													text = "[RulerDesignerSkill.GetName]"
													autoresize = no
												}

												text_single = {
													name = "skill_level"
													layoutpolicy_horizontal = expanding
													text = "[RulerDesignerSkill.GetLevelDesc]"
													default_format = "#weak"
													autoresize = no
												}
											}

											button_round = {
												size = { 28 28 }
												onclick = "[RulerDesignerSkill.ChangeValue( '(int32)-1' )]"
												enabled = "[GreaterThan_int32( RulerDesignerSkill.GetBaseValue, '(int32)0' )]"

												button_minus_small = {
													name = "decrease_skill"
													parentanchor = center
													alwaystransparent = yes
												}
											}

											text_single = {
												name = "skill_value"

												datacontext = "[RulerDesignerSkill.GetModifiedValueBreakdown]"
												
												tooltip_enabled = "[ValueBreakdown.HasTooltip]"
												tooltipwidget = {
													widget_value_breakdown_tooltip = {}
												}
												
												text = "[ValueBreakdown.GetValue]"

												using = Font_Size_Big
												default_format = "#high"
												align = nobaseline|center
												min_width = 25
											}

											button_round = {
												size = { 28 28 }
												onclick = "[RulerDesignerSkill.ChangeValue( '(int32)1' )]"
												enabled = "[LessThan_int32( RulerDesignerSkill.GetBaseValue, '(int32)100' )]"

												button_plus_small = {
													name = "increase_skill"
													parentanchor = center
													alwaystransparent = yes
												}
											}
										}
									}
								}
							}

							text_single = {
								name = "prowess_muscle_info"
								text = PROWESS_MUSCLE_INFO_PERSONAL
								default_format = "#weak"
							}
						}

						vbox = {
							name = "family"
							layoutpolicy_horizontal = expanding
							spacing = 10

							vbox_header_with_line = {
								layoutpolicy_horizontal = expanding

								blockoverride "header_label"
								{
									text = "RULER_DESIGNER_FAMILY_LABEL"
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 30

								vbox = {
									layoutpolicy_vertical = expanding

									button_checkbox_label = {
										name = "generate_spouse_button"
										layoutpolicy_horizontal = expanding

										onclick = "[RulerDesignerWindow.ToggleGenerateSpouse]"
										enabled = "[RulerDesignerWindow.IsAdult]"
										tooltip = "RULER_DESIGNER_GENERATE_SPOUSE_TOOLTIP"

										blockoverride "checkbox"
										{
											checked = "[RulerDesignerWindow.ShouldGenerateSpouse]"
										}

										blockoverride "text"
										{
											text = "RULER_DESIGNER_GENERATE_SPOUSE_LABEL"
										}
									}

									expand = {}
								}

								vbox = {
									hbox = {
										name = "generate_sons_amount"
										layoutpolicy_horizontal = expanding
										spacing = 20

										text_single = {
											layoutpolicy_horizontal = expanding
											text = "RULER_DESIGNER_GENERATED_SONS_LABEL"
											align = nobaseline
										}

										tooltip = RULER_DESIGNER_GENERATED_SONS_TOOLTIP

										hbox = {
											spacing = 10

											button_round = {
												size = { 28 28 }
												onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedSons( '(int32)-1' )]"
												enabled = "[GreaterThan_int32( RulerDesignerWindow.GetNumberOfGeneratedSons, '(int32)0' )]"

												button_minus_small = {
													name = "decrease_amount"
													parentanchor = center
													alwaystransparent = yes
												}
											}

											text_single = {
												name = "sons_value"
												text = "[RulerDesignerWindow.GetNumberOfGeneratedSons]"
												using = Font_Size_Big
												default_format = "#high"
												align = nobaseline|center
												min_width = 25
											}

											button_round = {
												size = { 28 28 }
												onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedSons( '(int32)1' )]"
												enabled = "[LessThan_int32( RulerDesignerWindow.GetNumberOfGeneratedChildren, RulerDesignerWindow.CalcMaxNumberOfGeneratedChildren )]"

												button_plus_small = {
													name = "increase_amount"
													parentanchor = center
													alwaystransparent = yes
												}
											}
										}
									}

									hbox = {
										name = "generate_daughters_amount"
										layoutpolicy_horizontal = expanding
										spacing = 20

										text_single = {
											layoutpolicy_horizontal = expanding
											text = "RULER_DESIGNER_GENERATED_DAUGHTERS_LABEL"
											align = nobaseline
										}

										tooltip = RULER_DESIGNER_GENERATED_DAUGHTERS_TOOLTIP

										hbox = {
											spacing = 10

											button_round = {
												size = { 28 28 }
												onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedDaughters( '(int32)-1' )]"
												enabled = "[GreaterThan_int32( RulerDesignerWindow.GetNumberOfGeneratedDaughters, '(int32)0' )]"

												button_minus_small = {
													name = "decrease_amount"
													parentanchor = center
													alwaystransparent = yes
												}
											}

											text_single = {
												name = "daughters_value"
												text = "[RulerDesignerWindow.GetNumberOfGeneratedDaughters]"
												using = Font_Size_Big
												default_format = "#high"
												align = nobaseline|center
												min_width = 25
											}

											button_round = {
												size = { 28 28 }
												onclick = "[RulerDesignerWindow.ChangeNumberOfGeneratedDaughters( '(int32)1' )]"
												enabled = "[LessThan_int32( RulerDesignerWindow.GetNumberOfGeneratedChildren, RulerDesignerWindow.CalcMaxNumberOfGeneratedChildren )]"

												button_plus_small = {
													name = "increase_amount"
													parentanchor = center
													alwaystransparent = yes
												}
											}
										}
									}
								}

								text_multi = {
									visible = "[Not( RulerDesignerWindow.IsAdult )]"
									text = RULER_DESIGNER_ADULT_ONLY_WARNING
									autoresize = yes
									max_width = 130
									align = center
								}

								expand = {}
							}
						}

						hbox = {
							name = "achievements"
							layoutpolicy_horizontal = expanding
							spacing = 10

							achievements_enabled_icon = {
								visible = "[And( IsIronmanEnabled, LessThanOrEqualTo_int32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) ) )]"
							}
							achievements_disabled_icon = {
								visible = "[Or( Not( IsIronmanEnabled ), GreaterThan_int32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) ) )]"
							}

							vbox = {
								text_single = {
									text = RULER_DESIGNER_ACHIEVEMENTS_LABEL
								}
								text_single = {
									text = RULER_DESIGNER_ACHIEVEMENTS_AVAILABLE
									visible = "[And( IsIronmanEnabled, LessThanOrEqualTo_int32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) ) )]"
									default_format = "#P"
								}
								text_single = {
									text = RULER_DESIGNER_ACHIEVEMENTS_NOT_AVAILABLE
									visible = "[Or( Not( IsIronmanEnabled ), GreaterThan_int32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) ) )]"
									default_format = "#N"
								}
							}

							expand = {}

							text_multi = {
								name = "achievements_info"
								text = RULER_DESIGNER_ACHIEVEMENTS_INFO
								default_format = "#weak"
								autoresize = yes
								max_width = 300
							}
						}

					}
					expand = {}

					button_primary_big = {
						text = "RULER_DESIGNER_FINALIZE"

						enabled = "[RulerDesignerWindow.CanFinalize]"
						tooltip = "[RulerDesignerWindow.GetFinalizeTooltip]"

						onclick = "[RulerDesignerWindow.FinalizeOverwrite]"
					}
				}
			}
		}

		hbox = {
			name = "appearance_customizer_view"
			visible = "[VariableSystem.Exists( 'appearance_customization_window_open' )]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 20 20 }

			using =  Animation_Tab_Switch

			widget = {
				layoutpolicy_vertical = expanding
				size = { 520 0 }

				vbox = {
					name = "ethnicity_panel"
					visible = "[VariableSystem.HasValue( 'appearance_customization_window_open', 'ethnicity_selection' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin = { 15 15 }
					spacing = 10

					using = Animation_ShowHide_Quick

					text_label_left = {
						layoutpolicy_horizontal = expanding
						text = RULDER_DESIGNER_ETHNICITY_LABEL
					}

					vbox = {
						name = "new_appearance"
						layoutpolicy_horizontal = expanding
						spacing = 20

						text_single = {
							name = "override_portrait_warning"
							layoutpolicy_horizontal = expanding
							text = RULER_DESIGNER_OVERRIDE_PORTRAIT
							autoresize = no
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_multi = {
								text = RULER_DESIGNER_ETHNICITY_INFO
								autoresize = yes
								max_width = 470
							}

							expand = {}
						}

						scrollbox = {
							name = "ethinicity_list"
							layoutpolicy_horizontal = expanding
							minimumsize = { 0 470 }

							blockoverride "scrollbox_content"
							{
								vbox = {
									datamodel = "[GetEthnicities]"
									layoutpolicy_horizontal = expanding

									item = {
										button_standard_hover = {
											visible = "[Ethnicity.IsVisible]"
											layoutpolicy_horizontal = expanding

											text = "[Ethnicity.GetName]"
											size = { 0 40 }
											onclick = "[RulerDesignerWindow.SetEthnicity( Ethnicity.Self )]"
											onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
										}
									}
								}
							}
						}
					}

					expand = {}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						button_standard_back = {
							text = "BACK_LABEL"
							onclick = "[VariableSystem.Clear( 'appearance_customization_window_open' )]"
							onclick = "[VariableSystem.Clear( 'appearance_customization_portrait_view' )]"
						}

						button_primary = {
							visible = "[Not(VariableSystem.HasValue( 'appearance_customization_window_open', 'main_customizer' ))]"
							text = "RULER_DESIGNER_CUSTOMIZE_APPEARANCE_FURTHER"
							onclick = "[VariableSystem.Set( 'appearance_customization_window_open', 'main_customizer' )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'body' )]"
							min_width = 300
						}
					}

					
				}

				vbox = {
					name = "main_customizer"
					visible = "[VariableSystem.HasValue( 'appearance_customization_window_open', 'main_customizer' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin = { 15 15 }
					spacing = 10

					using = Animation_ShowHide_Quick

					expand = {}

					vbox = {
						spacing = 10

						text_label_left = {
							layoutpolicy_horizontal = expanding

							text = RULER_DESIGNER_ANATOMY_LABEL
						}

						button_standard = {
							text = RULER_DESIGNER_APPEARANCE_CATEGORY_BODY
							onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'body' )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'full_body' )]"
							down = "[VariableSystem.HasValue( 'appearance_customization_side_tab_open', 'body' )]"
						}

						button_standard = {
							text = RULER_DESIGNER_APPEARANCE_CATEGORY_HEAD_AND_NECK
							onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'head_neck' )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'face' )]"
							down = "[VariableSystem.HasValue( 'appearance_customization_side_tab_open', 'head_neck' )]"
						}

						button_standard = {
							text = RULER_DESIGNER_CATEGORY_ears
							onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'ears' )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'face' )]"
							down = "[VariableSystem.HasValue( 'appearance_customization_side_tab_open', 'ears' )]"
						}

						button_standard = {
							text = RULER_DESIGNER_APPEARANCE_CATEGORY_FACE
							onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'face' )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'face' )]"
							down = "[VariableSystem.HasValue( 'appearance_customization_side_tab_open', 'face' )]"
						}

						button_standard = {
							text = RULER_DESIGNER_CATEGORY_eyes
							onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'eyes' )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'face' )]"
							down = "[VariableSystem.HasValue( 'appearance_customization_side_tab_open', 'eyes' )]"
						}

						button_standard = {
							text = RULER_DESIGNER_CATEGORY_nose
							onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'nose' )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'face' )]"
							down = "[VariableSystem.HasValue( 'appearance_customization_side_tab_open', 'nose' )]"
						}

						button_standard = {
							text = RULER_DESIGNER_CATEGORY_mouth
							onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'mouth' )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'face' )]"
							down = "[VariableSystem.HasValue( 'appearance_customization_side_tab_open', 'mouth' )]"
						}



						spacer = {
							size = { 10 10 }
						}

						text_label_left = {
							layoutpolicy_horizontal = expanding
							text = RULER_DESIGNER_HAIR_LABEL
						}
						button_standard = {
							text = RULER_DESIGNER_APPEARANCE_CATEGORY_HAIR
							onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'hair' )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'face' )]"
							down = "[VariableSystem.HasValue( 'appearance_customization_side_tab_open', 'hair' )]"
						}
						button_standard = {
							text = RULER_DESIGNER_APPEARANCE_CATEGORY_BEARD
							visible = "[Not( RulerDesignerWindow.IsFemale )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'beard' )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'face' )]"
							down = "[VariableSystem.HasValue( 'appearance_customization_side_tab_open', 'beard' )]"
						}

						button_standard = {
							text = "SHOW UNGROUPED"
							default_format = "#D"
							visible = "[InDebugMode]"
							onclick = "[VariableSystem.Set( 'appearance_customization_side_tab_open', 'default' )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'full_body' )]"
							down = "[VariableSystem.HasValue( 'appearance_customization_side_tab_open', 'default' )]"
						}
					}

					expand = {}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						button_standard_back = {
							text = "BACK_LABEL"
							onclick = "[VariableSystem.Set( 'appearance_customization_window_open', 'ethnicity_selection' )]"
							onclick = "[VariableSystem.Set( 'appearance_customization_portrait_view', 'full_body' )]"
							onclick = "[VariableSystem.Clear( 'appearance_customization_side_tab_open' )]"
						}

						button_primary = {
							visible = "[VariableSystem.HasValue( 'appearance_customization_window_open', 'main_customizer' )]"
							text = RULER_DESIGNER_CUSTOMIZE_APPEARANCE_FINISH
							onclick = "[VariableSystem.Clear( 'appearance_customization_side_tab_open' )]"
							onclick = "[VariableSystem.Clear( 'appearance_customization_window_open' )]"
							onclick = "[VariableSystem.Clear( 'appearance_customization_portrait_view' )]"
							min_width = 300
						}
					}
				}
			}

			widget = {
				name = "portrait_view"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				widget = {
					visible = "[VariableSystem.HasValue( 'appearance_customization_portrait_view', 'face' )]"
					size = { 100% 100% }

					using = Animation_ShowHide_Standard

					icon = {
						parentanchor = center
						position = { 130 -80 }
						size = { 500 700 }
						texture = "[RulerDesignerWindow.GetPortrait( 'environment_head', 'camera_ruler_designer_head_profile', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"

						using = Animation_ShowHide_Quick

						state = {
							name = "ruler_designer_portrait_refresh"
							using = Animation_Refresh_FadeOut
						}
	
						state = {
							using = Animation_Refresh_FadeIn
						}


						modify_texture = {
							texture = "gfx/portraits/portrait_mask_event_letter.dds"
							blend_mode = alphamultiply
						}

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal_thick.dds"
							blend_mode = alphamultiply
						}
					}

					icon = {
						parentanchor = center
						position = { -130 -80 }
						size = { 500 700 }
						texture = "[RulerDesignerWindow.GetPortrait( 'environment_head', 'camera_head', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"

						using = Animation_ShowHide_Quick

						state = {
							name = "ruler_designer_portrait_refresh"
							using = Animation_Refresh_FadeOut
						}
	
						state = {
							using = Animation_Refresh_FadeIn
						}

						modify_texture = {
							texture = "gfx/portraits/portrait_mask_event_letter.dds"
							blend_mode = alphamultiply
						}
					}
				}

				icon = {
					visible = "[VariableSystem.HasValue( 'appearance_customization_portrait_view', 'full_body' )]"
					parentanchor = bottom|hcenter
					position = { 0 20 }
					size = { 650 1000 }
					scale = "[ScaleToFitElementInside('(int32)650', '(int32)1100')]"
					texture = "[RulerDesignerWindow.GetPortrait( 'environment_body', 'camera_ruler_designer', PdxGetWidgetScreenSize( PdxGuiWidget.Self ) )]"

					using = Animation_ShowHide_Standard

					state = {
						name = "ruler_designer_portrait_refresh"
						using = Animation_Refresh_FadeOut
					}

					state = {
						using = Animation_Refresh_FadeIn
					}
				}

				widget = {
					parentanchor = bottom|hcenter
					position = { 0 -20 }

					vbox = {
						set_parent_size_to_minimum = yes

						button_standard = {
							size = { 250 32 }
							onclick = "[RulerDesignerWindow.RandomizeEthnicityDnaFromCurrent]"
							onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
							visible = "[Not(VariableSystem.HasValue( 'appearance_customization_window_open', 'ethnicity_selection' ))]"
							text = "RULER_DESIGNER_REGENERATE_PORTRAIT"

							button_randomize = {
								parentanchor = vcenter
								position = { 7 0 }
							}
						}

						vbox = {
							name = "copy_paste_dna"
							margin_top = 10

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 20

								text_single = {
									layoutpolicy_horizontal = expanding

									text = "RULER_DESIGNER_SAVE_DNA_TO_CLIPBOARD"
								}

								button_copy = {
									onclick = "[RulerDesignerWindow.SaveDnaToClipboard]"
								}

								tooltip = RULER_DESIGNER_SAVE_DNA_TO_CLIPBOARD_TOOLTIP
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 20

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "RULER_DESIGNER_LOAD_DNA_FROM_CLIPBOARD"
								}

								button_copy = {
									onclick = "[RulerDesignerWindow.LoadDnaFromClipboard]"
									onclick = "[PdxGuiTriggerAllAnimations('ruler_designer_portrait_refresh')]"
								}

								tooltip = RULER_DESIGNER_LOAD_DNA_FROM_CLIPBOARD_TOOLTIP
							}
						}
					}
				}
			}

			widget = {
				layoutpolicy_vertical = expanding
				size = { 520 0 }

				vbox = {
					name = "gene_editor"
					visible = "[VariableSystem.HasValue( 'appearance_customization_window_open', 'main_customizer' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					spacing = 10

					using = Animation_ShowHide_Quick

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 15 0 }

						text_label_left = {
							text = "[Localize( Concatenate( 'RULER_DESIGNER_CATEGORY_' , VariableSystem.Get( 'appearance_customization_side_tab_open' ) ) )]"
							layoutpolicy_horizontal = expanding
						}
					}

					scrollbox = {
						name = "gene_sliders"
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						minimumsize = { 200 0 }

						blockoverride "scrollbox_content"
						{
							vbox = {
								datamodel = "[RulerDesignerWindow.GetGenesByGroup( VariableSystem.Get( 'appearance_customization_side_tab_open' ) )]"
								layoutpolicy_horizontal = expanding
								spacing = 0

								item = {
									hbox = {
										name = "gene_entry"
										layoutpolicy_horizontal = expanding

										vbox = {
											layoutpolicy_vertical = expanding
											margin_top = 12

											text_multi = {
												minimumsize = { 0 33 }
												layoutpolicy_horizontal = expanding
												min_width = 190
												max_width = 190
												text = "[GeneCategory.GetName]"
											}

											expand = {}
										}


										vbox = {
											layoutpolicy_vertical = expanding
											layoutpolicy_horizontal = expanding
											margin = { 10 10 }
											spacing = 4
											
											visible = "[GeneCategory.IsType( 'morph' )]"

											background = {
												visible = "[GreaterThan_int32( GetDataModelSize( RulerDesignerWindow.GetMorphTemplatesByGene( GeneCategory.Self ) ), '(int32)1' )]"
												using = Background_Frame
											}

											scrollbar_morph_gene = {
												name = "scrollbar_morph_gene"
												visible = "[GeneCategory.ShowMorphGeneSlider]"
											}

											text_single = {
												name = "morph_gene_female_only"
												text = RULER_DESIGNER_GENE_ONLY_WOMEN
												visible = "[GeneCategory.IsOnlyVisibleFemale]"
												align = left
												layoutpolicy_horizontal = expanding
												default_format = "#weak"
											}

											expand = {}

											vbox_morph_gene_template_buttons = {
												name = "gene_templates"

												visible = "[GreaterThan_int32( GetDataModelSize( RulerDesignerWindow.GetMorphTemplatesByGene( GeneCategory.Self ) ), '(int32)1' )]"
												datamodel = "[RulerDesignerWindow.GetMorphTemplatesByGene( GeneCategory.Self )]"
											}
										}

										vbox_accessory_gene_buttons = {
											name = "vbox_accessory_gene_buttons"
											visible = "[GeneCategory.IsType( 'accessory' )]"
											datamodel = "[RulerDesignerWindow.GetAccessoryModifiers( GeneCategory.Self )]"
											layoutpolicy_horizontal = expanding
											margin_top = 5
										}

										vbox_color_picker = {
											name = "vbox_color_picker"
											datacontext = "[RulerDesignerWindow.AccessColorPicker( GeneCategory.Self )]"
											visible = "[GeneCategory.IsType( 'color' )]"
										}

										expand = {}
									}
								}
							}
						}
					}

					expand = {}
				}
			}
		}
	}
}

types ruler_designer_types
{
	type vbox_header_with_line = vbox
	{
		vbox = {
			layoutpolicy_horizontal = expanding
			spacing = 3

			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 3

				text_label_left = {
					block "header_label" {}
					layoutpolicy_horizontal = expanding
					using = Font_Size_Medium
					block "autoresize"
					{
						autoresize = no
					}
				}

				expand = {}
			}

			divider_light = {
				layoutpolicy_horizontal = expanding
			}
		}
	}

	type vbox_labelled_entry = vbox
	{

		vbox_header_with_line = {
			layoutpolicy_horizontal = expanding
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin_left = 5

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10
				margin_top = 3

				block "item_icon_entry"
				{
					icon = {
						name = "item_icon"
						size = { 60 60 }
						block "item_icon_texture"
						{
							texture = "gfx/interface/_debug/pink_square_chill.png"
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					block "item_data"
					{
						text_single = {
							name = "item_name"
							layoutpolicy_horizontal = expanding
							default_format = "#bold"
							autoresize = no

							block "item_name_label"
							{
								text = "#D FILL ME IN#!"
							}
						}

						text_single = {
							name = "item_info"
							layoutpolicy_horizontal = expanding
							default_format = "#high"
							autoresize = no
							using = Font_Size_Medium

							block "item_info_text"
							{
								text = "#D FILL ME IN#!"
							}
						}
					}
				}
			}

			expand = {}

			block "item_button"
			{
				button_replace = {
					name = "reset"

					block "reset_button" {}
				}
			}
		}
	}

	type scrollbar_value_slider = scrollbar
	{
		direction = horizontal
		size = { 270 20 }
		wheelstep = 0

		track = {
			using = SettingsValueTrack
		}

		slider = {
			using = SettingsValueSlider
		}

		dec_button = {
			using = SettingsValueDecButton
		}

		inc_button = {
			using = SettingsValueIncButton
		}
	}

	type scrollbar_age = scrollbar_value_slider
	{
		min = 0
		max = 120

		onvaluechanged = "[RulerDesignerWindow.OnAgeChange( PdxGuiWidget.Self )]"
		value = "[IntToFloat( RulerDesignerWindow.GetAge )]"
	}

	type scrollbar_weight = scrollbar_value_slider
	{
		min = -100
		max = 100

		onvaluechanged = "[RulerDesignerWindow.OnWeightChange( PdxGuiWidget.Self )]"
		value = "[IntToFloat( RulerDesignerWindow.GetWeight )]"
	}

	type scrollbar_morph_gene = scrollbar_value_slider
	{
		min = 0 # You should probably not change these min and max values, the code relies on them being uint8s
		max = 255

		onvaluechanged = "[RulerDesignerWindow.OnMorphGeneChange( GeneCategory.Self, PdxGuiWidget.Self )]"
		value = "[RulerDesignerWindow.GetMorphGeneValue( GeneCategory.Self )]"


	}

	type vbox_morph_gene_template_buttons = vbox
	{
		spacing = 3
		item = {
			button_standard = {
				name = "template_button"
				text = "[GeneTemplate.GetName]"
				onclick = "[RulerDesignerWindow.OnMorphTemplateSelected( GeneTemplate.Self ) ]"
				down = "[RulerDesignerWindow.HasMorphTemplateSelected( GeneTemplate.Self ) ]"
			}
		}
	}

	type vbox_accessory_gene_buttons = vbox
	{
		spacing = 3

		item = {
			button_standard_hover = {
				name = "accessory_button"
				visible = "[RulerDesignerWindow.IsModifierValid( RulerDesignerPortraitModifier.Self )]"
				layoutpolicy_horizontal = expanding

				text = "[RulerDesignerPortraitModifier.GetName]"
				onclick = "[RulerDesignerWindow.OnPortraitModifierSelected( GeneCategory.Self, RulerDesignerPortraitModifier.Self )]"
				down = "[RulerDesignerWindow.IsPortraitModifierSelected( GeneCategory.Self, RulerDesignerPortraitModifier.Self )]"
			}
		}
	}

	type vbox_color_picker = vbox
	{
		margin = { 10 10 }

		background = {
			using = Background_Area_Dark
			alpha = 0.7
		}

		background = {
			using = Background_Frame
			alpha = 0.7
			margin = { -5 -5 }
		}

		button_normal = {
			size = { 256 256 }
			onclick = "[ColorGenePicker.OnClick( PdxGuiWidget.Self )]"
			texture = "[ColorGenePicker.GetTexture]"
			effectname = "NoHighlight"

			icon = {
				name = "current"
				size = { 15 15 }
				texture = "gfx/interface/icons/color_picker.dds"
				position = "[Subtract_CVector2f( ColorGenePicker.GetPosition, '(CVector2f)8,8' )]"
			}
		}

		text_multi = {
			text = "[ColorGenePicker.GetPositionInfo]"
			default_format = "#D"
			autoresize = yes
			max_width = 250
			visible = "[InDebugMode]"
		}
	}

	type vbox_trait_selection_content = vbox
	{
		datacontext = "[GetNullCharacter]"
		spacing = 3

		item = {
			button_standard_hover = {
				name = "trait_item"
				visible = "[And( Trait.ShowInRulerDesigner, Not( RulerDesignerWindow.HasTrait( Trait.Self ) ) )]"
				enabled = "[RulerDesignerWindow.CanPickTrait( Trait.Self )]"
				layoutpolicy_horizontal = expanding
				size = { 0 50 }
				onclick = "[RulerDesignerWindow.FinishTraitEditing( Trait.Self )]"
				onclick = "[VariableSystem.ClearIf( 'trait_select_window_open', VariableSystem.Exists( 'trait_select_window_replace' ) )]"
				onclick = "[VariableSystem.Clear( 'trait_select_window_replace' )]"
				tooltip = "[RulerDesignerWindow.CanPickTraitDesc( Trait.Self )]"

				hbox = {
					margin = { 5 0 }
					margin_right = 10
					spacing = 10

					icon_trait = {
						blockoverride "faith_context"
						{
							datacontext = "[RulerDesignerWindow.GetFaith]"
						}
						blockoverride "tooltip_placement"
						{
							using = tooltip_ws
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[Trait.GetNameNoTooltip( Character.Self )]"
						default_format = "#clickable"
					}

					text_single = {
						name = "point_cost"
						text = "[Trait.GetRulerDesignerCost|=]"
						align = nobaseline
					}
				}
			}
		}
	}

	type button_trait_slot_entry = button_trait
	{
		datacontext = "[TraitSlot.GetTrait]"

		blockoverride "faith_context"
		{
			datacontext = "[RulerDesignerWindow.GetFaith]"
		}

		block "button_trait_onclick"
		{
		}

		state = {
			name = "_mouse_enter"
			on_start = "[PdxGuiWidget.FindChild('remove_icon').TriggerAnimation('show')]"
		}

		state = {
			name = "_mouse_leave"
			on_start = "[PdxGuiWidget.FindChild('remove_icon').TriggerAnimation('hide')]"
		}

		button_close = {
			name = "remove_icon"
			parentanchor = center
			alwaystransparent = yes
			alpha = 0

			state = {
				name = "show"
				using = Animation_FadeIn_Quick
				duration = 0.05
			}

			state = {
				name = "hide"
				alpha = 0
				using = Animation_FadeOut_Quick
			}

			background = {
				texture = "gfx/interface/component_masks/mask_fade_circle.dds"
				color = { 0.18 0.18 0.18 0.8 }
				margin = {20 20}
			}
		}

		onclick = "[TraitSlotArray.RemoveTrait( TraitSlot.Self )]"
		button_ignore = none
	}

	type hbox_trait_slot = hbox
	{
		hbox = {
			margin_bottom = 4

			text_label_left = {
				min_width = 125
				block "trait_slots_header_text"
				{
					text = "FILL ME IN"
					default_format = "#D"
				}
			}
		}

		hbox = {
			block "trait_list"
			{
				hbox = {
					name = "current_traits_less_than_equal_6"
					layoutpolicy_horizontal = expanding

					size = { 300 50 }

					datamodel = "[TraitSlotArray.AccessSlots]"
					visible = "[And( DataModelHasItems( TraitSlotArray.AccessSlots ), LessThanOrEqualTo_int32( GetDataModelSize( TraitSlotArray.AccessSlots ), '(int32)6' ) )]"

					item = {
						container = {
							button_trait_slot_entry = {}
						}
					}
				}
				overlappingitembox = {
					name = "current_traits_more_than_6"
					layoutpolicy_horizontal = expanding

					size = { 300 50 }

					datamodel = "[TraitSlotArray.AccessSlots]"
					visible = "[And( DataModelHasItems( TraitSlotArray.AccessSlots ), GreaterThan_int32( GetDataModelSize( TraitSlotArray.AccessSlots ), '(int32)6' ) )]"

					item = {
						container = {
							button_trait_slot_entry = {}
						}
					}
				}
			}

			block "plus_button"
			{
				widget = {
					size = { 50 50 }
					name = "add_trait_slot"

					button_plus = {
						name = "add_trait_button"
						parentanchor = center

						tooltip = "RULER_DESIGNER_ADD_TRAIT_SLOT_TOOLTIP"

						onclick = "[TraitSlotArray.StartEditing]"
						
						block "plus_onclick"
						{
							onclick = "[VariableSystem.Set( 'trait_select_window_open', 'true' )]"
						}
					}
				}
			}
		}

		expand = {}
	}
}

template Button_Close_Select_Faith
{
	onclick = "[VariableSystem.Clear( 'faith_select_window_open' )]"
}

template Button_Select_Faith
{
	onclick = "[RulerDesignerWindow.SetFaith( Faith.Self )]"
	using = Button_Close_Select_Faith
}

template Button_Close_Select_Culture
{
	onclick = "[VariableSystem.Clear( 'culture_select_window_open' )]"
}

template Button_Select_Culture
{
	onclick = "[RulerDesignerWindow.SetCulture( CultureTemplate.Self )]"
	using = Button_Close_Select_Culture
}

template ProgressBar_Achievements
{
	size = { 200 20 }
	value = "[CurrentAndMaxToProgressbarValueInt32( RulerDesignerWindow.GetPointsUsed, GetDefine( 'NRulerDesigner', 'IRONMAN_POINT_MAX' ) )]"
}
